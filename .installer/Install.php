<?php

namespace Adeliom\Installer;

use Composer\Script\Event;
use Symfony\Component\Dotenv\Dotenv;

class Install
{
    private $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!"#$%&()*+,-./:;<=>?@[]^_`{|}~';

    public static function buildEnv(Event $event)
    {
        $io = $event->getIO();

        if(!is_file(dirname(__DIR__) . "/docker")) {
            $dockerENV = file_get_contents(dirname(__DIR__) . "/.docker.dist");
        }else{
            $dockerENV = file_get_contents(dirname(__DIR__) . "/.docker");
        }

        if(!is_file(dirname(__DIR__) . "/.env")) {
            $projectENV = file_get_contents(dirname(__DIR__) . "/.env.dist");
            file_put_contents(dirname(__DIR__) . "/.env", $projectENV);
        }else{
            $projectENV = file_get_contents(dirname(__DIR__) . "/.env");
        }

        $mutagenConfig = file_get_contents(dirname(__DIR__) . "/_mutagen/config.yml");

        if(!is_file(dirname(__DIR__) . "/install.lock")){
            $baseName = basename(dirname(__DIR__));
            $projectName = $io->ask(sprintf("<info>Project Name :</info> [%s]", $baseName), $baseName);
            $siteURL = $io->ask(sprintf("<info>Site URL :</info> [%s.traefik.me]", $projectName), "$projectName.traefik.me");

            $dbHost = $io->ask(sprintf("<info>Database host :</info> [%s_mariadb]", $projectName), $projectName.'_mariadb');
            $dbName = $io->ask(sprintf("<info>Database name :</info> [db_%s]", $projectName), "db_$projectName");
            $dbUser = $io->ask(sprintf("<info>Database user :</info> [db_%s]", $projectName), "db_$projectName");
            $dbPassword = $io->ask(sprintf("<info>Database password :</info> [password]", $projectName), "password");
            $dbPrefix = $io->ask(sprintf("<info>Database prefix :</info> [wp_]", $projectName), "wp_");

            $salts = self::generateSalts();
            $appKey = self::generateAppKey($projectName);

            $mutagenConfig = str_replace("example_mutagen", $projectName . '_mutagen', $mutagenConfig);
            file_put_contents(dirname(__DIR__) . "/_mutagen/config.yml", $mutagenConfig);

            $replace = [
                // DOCKER ENV
                "PROJECT_NAME" => $projectName,
                "DB_HOST" => $dbHost,
                "DB_NAME" => $dbName,
                "DB_USER" => $dbUser,
                "DB_PASSWORD" => $dbPassword,
                "DB_PREFIX" => $dbPrefix,
                "WP_HOME" => "https://" . $siteURL,
                "APP_KEY" => $appKey
            ];

            $replace = array_merge($replace, $salts);
        }else{
            $replace = json_decode(file_get_contents(dirname(__DIR__) . "/install.lock"));
        }


        foreach ($replace as $k => $v){
            $projectENV = preg_replace('/^'.$k.'=?.+$/m', $k . '=' . $v, $projectENV);
            $dockerENV = preg_replace('/^'.$k.'=?.+$/m', $k . '=' . $v, $dockerENV);
        }

        file_put_contents(dirname(__DIR__) . "/.env", $projectENV);
        file_put_contents(dirname(__DIR__) . "/.docker", $dockerENV);

        if(!is_file(dirname(__DIR__) . "/install.lock")) {
            file_put_contents(dirname(__DIR__) . "/install.lock", json_encode($replace, JSON_PRETTY_PRINT));
        }
    }

    public static function generateSalts(){
        $installer = new self();
        $salts=[];

        $salts['AUTH_KEY'] = $installer->salt();
        $salts['SECURE_AUTH_KEY'] = $installer->salt();
        $salts['LOGGED_IN_KEY'] = $installer->salt();
        $salts['NONCE_KEY'] = $installer->salt();
        $salts['AUTH_SALT'] = $installer->salt();
        $salts['SECURE_AUTH_SALT'] = $installer->salt();
        $salts['LOGGED_IN_SALT'] = $installer->salt();
        $salts['NONCE_SALT'] = $installer->salt();

        return $salts;
    }

    public static function generateAppKey($projectName){
        return "'".'base64:' . base64_encode(sha1(mt_rand(1, 90000) . $projectName))."'";
    }

    public function salt($length = 64): string
    {
        $characters = $this->chars;
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return "'".$randomString."'";
    }

    public static function dumpEnv(Event $event)
    {
        $io = $event->getIO();

        $path = dirname(__DIR__).'/.env';

        $vars = self::loadEnv($path, null);
        $env = $vars['APP_ENV'];

        $vars = var_export($vars, true);
        $vars = <<<EOF
<?php

// This file was generated by running "composer dump-env $env"

return $vars;

EOF;
        file_put_contents($path.'.local.php', $vars, \LOCK_EX);

        $io->writeError('Successfully dumped .env files in <info>.env.local.php</>');

        return 0;
    }

    private static function loadEnv(string $path, ?string $env): array
    {
        if (!file_exists($autoloadFile = dirname(__DIR__).'/vendor/autoload.php')) {
            throw new \RuntimeException(sprintf('Please run "composer install" before running this command: "%s" not found.', $autoloadFile));
        }

        require $autoloadFile;

        if (!class_exists(Dotenv::class)) {
            throw new \RuntimeException('Please run "composer require symfony/dotenv" to load the ".env" files configuring the application.');
        }

        $globalsBackup = [$_SERVER, $_ENV];
        unset($_SERVER['APP_ENV']);
        $_ENV = ['APP_ENV' => $env];
        $_SERVER['SYMFONY_DOTENV_VARS'] = implode(',', array_keys($_SERVER));
        putenv('SYMFONY_DOTENV_VARS='.$_SERVER['SYMFONY_DOTENV_VARS']);

        try {
            if (method_exists(Dotenv::class, 'usePutenv')) {
                $dotenv = new Dotenv();
            } else {
                $dotenv = new Dotenv(false);
            }

            if (!$env && file_exists($p = "$path.local")) {
                $env = $_ENV['APP_ENV'] = $dotenv->parse(file_get_contents($p), $p)['APP_ENV'] ?? null;
            }

            if (!$env) {
                throw new \RuntimeException('Please provide the name of the environment either by using the "--env" command line argument or by defining the "APP_ENV" variable in the ".env.local" file.');
            }

            if (method_exists($dotenv, 'loadEnv')) {
                $dotenv->loadEnv($path);
            } else {
                // fallback code in case your Dotenv component is not 4.2 or higher (when loadEnv() was added)
                $dotenv->load(file_exists($path) || !file_exists($p = "$path.dist") ? $path : $p);

                if ('test' !== $env && file_exists($p = "$path.local")) {
                    $dotenv->load($p);
                }

                if (file_exists($p = "$path.$env")) {
                    $dotenv->load($p);
                }

                if (file_exists($p = "$path.$env.local")) {
                    $dotenv->load($p);
                }
            }

            unset($_ENV['SYMFONY_DOTENV_VARS']);
            $env = $_ENV;
        } finally {
            list($_SERVER, $_ENV) = $globalsBackup;
        }

        return $env;
    }
}
